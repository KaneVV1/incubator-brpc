// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax="proto2";
option cc_generic_services = true;

package test;

message GrpcRequest {
    required string message = 1;
    required bool gzip = 2;
    required bool return_error = 3;
    optional int64 timeout_us = 4;
};

message GrpcResponse {
    required string message = 1;
};

service GrpcService {
    rpc Method(GrpcRequest) returns (GrpcResponse);
    rpc MethodTimeOut(GrpcRequest) returns (GrpcResponse);
    rpc MethodNotExist(GrpcRequest) returns (GrpcResponse);

    // grpc stream

    // unary-unary(In a single call, the client can only send request once, and the server can
    // only respond once.)
    rpc SimpleMethod(GrpcRequest) returns (GrpcResponse);

    // stream-unary (In a single call, the client can transfer data to the server several times,
    // but the server can only return a response once.)
    rpc ClientStreamingMethod(/*stream*/ GrpcRequest) returns (GrpcResponse);

    // unary-stream (In a single call, the client can only transmit data to the server at one time,
    // but the server can return the response many times.)
    rpc ServerStreamingMethod(GrpcRequest) returns (/*stream*/ GrpcResponse);

    // stream-stream (In a single call, both client and server can send and receive data
    // to each other multiple times.)
    rpc BidirectionalStreamingMethod(/*stream*/ GrpcRequest) returns (/*stream*/ GrpcResponse);
}
